// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model AuthKey {
  id String @id @unique

  auth_user       AuthUser @relation(references: [id], fields: [auth_user_id], onDelete: Cascade)
  auth_user_id    String
  hashed_password String?

  @@index([auth_user_id])
  @@map("auth_key")
}

model AuthSession {
  id String @id @unique

  auth_user    AuthUser @relation(fields: [auth_user_id], references: [id], onDelete: Cascade)
  auth_user_id String
  expires      DateTime

  @@index([auth_user_id])
  @@map("auth_session")
}

model AuthUser {
  id String @id @unique

  AuthKey     AuthKey[]
  AuthSession AuthSession[]
  email       String        @unique
  User        User?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int?          @unique

  @@index([user_id])
  @@map("auth_user")
}

model Category {
  id Int @id @default(autoincrement())

  courses  Course[]
  img_href String
  title    String   @unique
}

model ContentType {
  id Int @id @default(autoincrement())

  CourseContent CourseContent[]
  title         String          @unique
}

model Course {
  id Int @id @default(autoincrement())

  category               String
  Category               Category        @relation(fields: [categoryId], references: [id])
  categoryId             Int
  current_price          Decimal
  description            String          @db.LongText
  difficulty             String
  estimated_time_hours   Int
  estimated_time_minutes Int
  img_href               String
  instructor             String
  Instructor             User            @relation(fields: [instructorId], references: [id])
  instructorId           Int
  lesson_cnt             Int
  lessons                Lesson[]
  original_price         Decimal
  organization           String?
  rating_avg             Float
  rating_cnt             Int
  title                  String          @db.MediumText
  CourseProgres          CourseProgres[]

  @@index([categoryId])
  @@index([instructorId])
}

model CourseContent {
  id Int @id @default(autoincrement())

  author        User        @relation(fields: [authorId], references: [id])
  authorId      Int
  content       Json
  contentTypeId Int
  Lesson        Lesson?     @relation(fields: [lessonId], references: [id])
  lessonId      Int?
  type          ContentType @relation(fields: [contentTypeId], references: [id])

  @@index([authorId])
  @@index([contentTypeId])
  @@index([lessonId])
}

model CourseProgres {
  user_id           Int
  users             User   @relation(fields: [user_id], references: [id])
  lessons_completed Int
  course_id         Int
  courses           Course @relation(fields: [course_id], references: [id])

  @@id([user_id, course_id])
  @@index([user_id])
  @@index([course_id])
}

model CSRFToken {
  token String @id @unique

  expires BigInt

  @@map("csrf_token")
}

model Lesson {
  id Int @id @default(autoincrement())

  content  CourseContent[]
  Course   Course?         @relation(fields: [courseId], references: [id])
  courseId Int?
  title    String

  @@index([courseId])
}

model Organization {
  id Int @id @default(autoincrement())

  description String?
  name        String
  users       User[]
}

model Permissions {
  id              Int    @id @default(autoincrement())
  permission_type String
  resource_id     Int
  resource_type   String
  user_id         Int
  users           User   @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("permissions")
}

model User {
  id Int @id @default(autoincrement())

  area_code      String?
  AuthUser       AuthUser?
  auth_user_id   String          @unique
  bio            String?         @db.LongText
  city           String?
  country_code   String?
  courseContent  CourseContent[]
  CourseProgres  CourseProgres[]
  courses        Course[]
  email          String          @unique
  name           String
  Organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId Int?
  permissions    Permissions[]
  phone_number   String?
  photo_url      String?
  state          String?

  @@index([auth_user_id])
  @@index([organizationId])
}
